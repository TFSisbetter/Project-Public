@page "/counter"
@using Emgu.CV
@using Emgu.CV.CvEnum
@using System.Drawing
@using Emgu.CV.CvEnum;
@using Emgu.CV.Structure;
@using Emgu.CV;
@using System.Runtime.InteropServices

<PageTitle>Counter</PageTitle>


<h3>File Upload</h3>

<InputFile OnChange="@HandleFileSelected" />

@if (file != null)
{
    <p>File Name: @file.Name</p>
    <p>File Size (bytes): @file.Size</p>
    <p>Image Preview:</p>
    <img src="@imageDataUrl" alt="Image Preview" />
}

@code {
    private IBrowserFile file;
    private string imageDataUrl;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        var base64 = Convert.ToBase64String(buffer);
        imageDataUrl = $"data:image/jpeg;base64,{base64}";

        IncrementCount(buffer);

        // // Convert to System.Drawing.Image (assuming it's an image file)
        // using (var stream = new System.IO.MemoryStream(buffer))
        // {

        //     using (var image = Image.FromStream(stream))
        //     {
        //         // Now you can work with the image object (e.g., display, process, etc.)
        //         // For example, you can use 'image' here to perform operations
        //         // Or you can store it as a property to use it elsewhere in your code.
        //     }
        // }
    }

    private void IncrementCount(byte[] bytes)
    {
        // Load the image
        //Mat image = CvInvoke.Imread("input_image.jpg", ImreadModes.Color);
        Mat image = new Mat();
        CvInvoke.Imdecode(bytes, ImreadModes.Color, image);

        // Convert the image to grayscale
        Mat grayImage = new Mat();
        CvInvoke.CvtColor(image, grayImage, ColorConversion.Bgr2Gray);

        // Detect edges using Canny edge detection
        double cannyThreshold1 = 100; // You can adjust these thresholds as needed
        double cannyThreshold2 = 200;
        Mat edges = new Mat();
        CvInvoke.Canny(grayImage, edges, cannyThreshold1, cannyThreshold2);

        imageDataUrl = ConvertMatToBase64(edges);
    }

    // private string ConvertMatToBase64(Mat mat)
    // {
    //     using (MemoryStream stream = new MemoryStream())
    //     {
    //         // Convert the Mat to a Bitmap
    //         Bitmap bitmap = mat.Bitmap;

    //         // Save the Bitmap to the MemoryStream as JPEG
    //         bitmap.Save(stream, ImageFormat.Jpeg);

    //         // Convert the MemoryStream to a byte array
    //         byte[] byteArray = stream.ToArray();

    //         // Convert the byte array to a base64 string
    //         string base64String = Convert.ToBase64String(byteArray);

    //         return base64String;
    //     }
    // }
    private string ConvertMatToBase64(Mat mat)
    {
        using (MemoryStream stream = new MemoryStream())
        {
            // Get image dimensions
            int width = mat.Width;
            int height = mat.Height;

            // Create a new Bitmap with the same dimensions
            Bitmap bitmap = new Bitmap(width, height, System.Drawing.Imaging.PixelFormat.Format24bppRgb);

            // Lock the bitmap data
            System.Drawing.Imaging.BitmapData bmpData = bitmap.LockBits(new Rectangle(0, 0, width, height),
                                                                        System.Drawing.Imaging.ImageLockMode.WriteOnly,
                                                                        bitmap.PixelFormat);

            // Copy the data from the Mat to the Bitmap

            //Marshal.Copy(mat.DataPointer, bmpData.Scan0, bmpData.Scan0, width * height);

            // Unlock the bitmap data
            bitmap.UnlockBits(bmpData);

            // Save the Bitmap to the MemoryStream as JPEG
            bitmap.Save(stream, System.Drawing.Imaging.ImageFormat.Jpeg);

            // Convert the MemoryStream to a byte array
            byte[] byteArray = stream.ToArray();

            // Convert the byte array to a base64 string
            string base64String = Convert.ToBase64String(byteArray);

            return base64String;
        }
    }

}
